/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-05-31 01:41:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.miniProject;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class Gomoku_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1713231525000L));
    _jspx_dependants.put("jar:file:/Users/sunwookim/Desktop/Major/WpWorkspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/jwbook/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fend_005fbegin;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fend_005fbegin = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fend_005fbegin.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("	<meta charset=\"UTF-8\">\n");
      out.write("	<title>Gomoku Game</title>\n");
      out.write("	<style>\n");
      out.write("        .board {\n");
      out.write("            display: grid;\n");
      out.write("            grid-template-columns: repeat(15, 20px);\n");
      out.write("            grid-template-rows: repeat(15, 20px);\n");
      out.write("            gap: 1px;\n");
      out.write("        }\n");
      out.write("        .omocpan {\n");
      out.write("            width: 20px;\n");
      out.write("            height: 20px;\n");
      out.write("            border: 1px solid #000;\n");
      out.write("            background-color: #f0f0f0;\n");
      out.write("        }\n");
      out.write("        .black {\n");
      out.write("            background-color: #000;\n");
      out.write("            border-radius: 50%;\n");
      out.write("        }\n");
      out.write("        .white {\n");
      out.write("            background-color: #fff;\n");
      out.write("            border-radius: 50%;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	<h1>Gomoku Game</h1>\n");
      out.write("    <div id=\"board\" class=\"board\">\n");
      out.write("    	");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("    </div>\n");
      out.write("	<form id=\"resultForm\" action=\"/jwbook/gomokuControl?action=playGomoku\" method=\"post\">\n");
      out.write("	    <input type=\"hidden\" id=\"player1Win\" name=\"player1Win\" value=\"0\">\n");
      out.write("	    <input type=\"hidden\" id=\"player1Lose\" name=\"player1Lose\" value=\"0\">\n");
      out.write("	    <input type=\"hidden\" id=\"player2Win\" name=\"player2Win\" value=\"0\">\n");
      out.write("	    <input type=\"hidden\" id=\"player2Lose\" name=\"player2Lose\" value=\"0\">\n");
      out.write("	    <button type=\"submit\">결과 전송</button>\n");
      out.write("	</form>\n");
      out.write("     <div>\n");
      out.write("    	<button id='btnAgain' class='btnResult' onclick=\"resetBoard()\">초기화</button>\n");
      out.write("    </div>\n");
      out.write("    \n");
      out.write("    <script>\n");
      out.write("    var currentPlayer = \"black\"; // 흑돌부터 시작\n");
      out.write("    const SIZE = 15;\n");
      out.write("    var board = [];\n");
      out.write("    \n");
      out.write("    function initializeBoard() {\n");
      out.write("        board = [];\n");
      out.write("        for (let i = 0; i < SIZE; i++) {\n");
      out.write("            board[i] = [];\n");
      out.write("            for (let j = 0; j < SIZE; j++) {\n");
      out.write("                board[i][j] = null;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    function placeStone(row, col, player1, player2) {\n");
      out.write("    	var omocpan = document.getElementById(\"omocpan_\" + row + \"_\" + col);\n");
      out.write("        if (!board[row][col]) {\n");
      out.write("            board[row][col] = currentPlayer;\n");
      out.write("            if (currentPlayer === \"black\") {\n");
      out.write("                omocpan.classList.add(\"black\");\n");
      out.write("                if (checkWin(row, col, \"black\")) {\n");
      out.write("                    alert(\"플레이어 1 (흑돌) 승리!\");\n");
      out.write("                    document.getElementById('player1Win').value = parseInt(document.getElementById('player1Win').value) + 1;\n");
      out.write("                    document.getElementById('player2Lose').value = parseInt(document.getElementById('player2Lose').value) + 1;\n");
      out.write("                    //document.getElementById('resultForm').submit();\n");
      out.write("                    resetBoard();\n");
      out.write("                }\n");
      out.write("                currentPlayer = \"white\"; // 플레이어 교체\n");
      out.write("            } else {\n");
      out.write("                omocpan.classList.add(\"white\");\n");
      out.write("                if (checkWin(row, col, \"white\")) {\n");
      out.write("                    alert(\"플레이어 2 (백돌) 승리!\");\n");
      out.write("                    document.getElementById('player2Win').value = parseInt(document.getElementById('player2Win').value) + 1;\n");
      out.write("                    document.getElementById('player1Lose').value = parseInt(document.getElementById('player1Lose').value) + 1;\n");
      out.write("                    //document.getElementById('resultForm').submit();\n");
      out.write("                    resetBoard();\n");
      out.write("                }\n");
      out.write("                currentPlayer = \"black\"; // 플레이어 교체\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    function checkWin(i, j, color) {\n");
      out.write("        // 가로, 세로, 대각선 방향에 대해 5개의 연속된 돌이 놓였는지 체크\n");
      out.write("        // 실제 게임에서는 이 부분의 로직이 더 복잡할 수 있음\n");
      out.write("        return (\n");
      out.write("            checkDirection(i, j, color, 1, 0) ||  // 가로 체크\n");
      out.write("            checkDirection(i, j, color, 0, 1) ||  // 세로 체크\n");
      out.write("            checkDirection(i, j, color, 1, 1) ||  // 대각선 체크\n");
      out.write("            checkDirection(i, j, color, 1, -1)  // 반대편 대각선 체크\n");
      out.write("        );\n");
      out.write("    }\n");
      out.write(" 	// 여기서 Controller에 플레이어의 정보와 돌의 위치를 전달\n");
      out.write("    function sendMoveToController(row, col, currentPlayer, player1, player2) {\n");
      out.write("    	let winner = checkwin(row, col);\n");
      out.write("    	if (currentPlayer === 'black' && winner) {\n");
      out.write("    		document.getElementById('player1Win').value = 1;\n");
      out.write("    		document.getElementById('player2Lose').value = 1;\n");
      out.write("    		alert(player1 + '가 이겼습니다!');\n");
      out.write("        } else if (currentPlayer === 'white' && winner) {\n");
      out.write("            document.getElementById('player1Lose').value = 1;\n");
      out.write("            document.getElementById('player2Win').value = 1;\n");
      out.write("            alert(player2 + '가 이겼습니다!');\n");
      out.write("        }\n");
      out.write("    	document.getElementById('resultForm').submit();\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    //아래는 방향함수 2개, 초기화함수\n");
      out.write("    \n");
      out.write("    function checkDirection(row, col, color, dRow, dCol) {\n");
      out.write("        let count = 1;\n");
      out.write("        for (let i = 1; i <= 4; i++) {\n");
      out.write("            if (isValid(row + i * dRow, col + i * dCol) && board[row + i * dRow][col + i * dCol] === color) {\n");
      out.write("                count++;\n");
      out.write("            } else {\n");
      out.write("                break;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        for (let i = 1; i <= 4; i++) {\n");
      out.write("            if (isValid(row - i * dRow, col - i * dCol) && board[row - i * dRow][col - i * dCol] === color) {\n");
      out.write("                count++;\n");
      out.write("            } else {\n");
      out.write("                break;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        return count >= 5;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    function isValid(row, col) {\n");
      out.write("        return row >= 0 && row < SIZE && col >= 0 && col < SIZE;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    function resetBoard() {\n");
      out.write("    	initializeBoard();\n");
      out.write("        currentPlayer = \"black\"; // 흑돌부터 시작\n");
      out.write("        const cells = document.querySelectorAll('.omocpan');\n");
      out.write("        cells.forEach(cell => {\n");
      out.write("            cell.classList.remove('black', 'white');\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("  \n");
      out.write("    window.onload = () => {\n");
      out.write("        initializeBoard();\n");
      out.write("    };\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fend_005fbegin.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /miniProject/Gomoku.jsp(36,5) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("row");
      // /miniProject/Gomoku.jsp(36,5) name = begin type = int reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setBegin(0);
      // /miniProject/Gomoku.jsp(36,5) name = end type = int reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setEnd(14);
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("    		");
            if (_jspx_meth_c_005fforEach_005f1(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("\n");
            out.write("    	");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fend_005fbegin.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(jakarta.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, jakarta.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fend_005fbegin.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent((jakarta.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /miniProject/Gomoku.jsp(37,6) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("col");
      // /miniProject/Gomoku.jsp(37,6) name = begin type = int reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setBegin(0);
      // /miniProject/Gomoku.jsp(37,6) name = end type = int reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setEnd(14);
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("    			<div class=\"omocpan\" id=\"omocpan_");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${row}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('_');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${col}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" onclick=\"placeStone(");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${row}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(',');
            out.write(' ');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${col}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(")\"></div>\n");
            out.write("    		");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fend_005fbegin.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }
}
