
package miniProject;

import java.io.IOException;
import java.sql.SQLException;

import org.apache.commons.beanutils.BeanUtils;

import jakarta.servlet.ServletConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import miniProject.GameModel.Move;
import miniProject.GameModel.Result;

/**
 * Servlet implementation class UserController
 */
public class UserController extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
	UserDAO dao =  null;
    public UserController() {
        super();
        // TODO Auto-generated constructor stub
    }
    public void init(ServletConfig config) throws ServletException{
		super.init(config);
		dao = new UserDAO();
	}
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
    	request.setCharacterEncoding("utf-8");
    	if(request.getParameter("move")==null) {
    		String action = request.getParameter("action");
			String view = "";
			
			if(action == null) {
				getServletContext().getRequestDispatcher("/userControl?action=list")
				.forward(request, response);
			}else {
				switch(action) {
				case "login" : try {
						view = login(request, response);
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} break;
				case "list" : view = list(request, response);break;
				case "join" : view = join(request, response);break;
				//case "delete" : view = delete(request, response);break;
				}
				getServletContext().getRequestDispatcher("/miniProject/" + view).forward(request, response);
			}
    	}else {
    		String playerMoveParam = request.getParameter("move");
            Move playerMove = Move.valueOf(playerMoveParam);

            GameModel gameModel = new GameModel();
            gameModel.setPlayerMove(playerMove);
            Move computerMove = gameModel.getComputerMove();
            Result result = gameModel.getResult();

            request.setAttribute("playerMove", playerMove);
            request.setAttribute("computerMove", computerMove);
            request.setAttribute("result", result);

            request.getRequestDispatcher("/miniProject/ResultView.jsp").forward(request, response);
    	}
	}
    public String login(HttpServletRequest request, HttpServletResponse response) throws SQLException {
    	String id = request.getParameter("id");
    	String password = request.getParameter("password");
    	if(dao.checkID(id)&&dao.checkPW(password))
    		return "GameView.jsp";
    	else
    		return "startPage.jsp";
    }
	public String list(HttpServletRequest request, HttpServletResponse response) {
		request.setAttribute("users", dao.getAll());
		return "startPage.jsp";
	}
	
	public String join(HttpServletRequest request, HttpServletResponse response) {
		User s = new User();
		try {
			BeanUtils.populate(s,request.getParameterMap());
		}catch(Exception e) {
			e.printStackTrace();
		}
		dao.join(s);
		return list(request,response);
	}

	

}

